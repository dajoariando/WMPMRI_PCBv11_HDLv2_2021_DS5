#ifndef _ALTERA_HPS_SOC_SYSTEM_H_
#define _ALTERA_HPS_SOC_SYSTEM_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file '../SoC/soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'tx_H1', class 'bstream_new'
 * The macros are prefixed with 'TX_H1_'.
 * The prefix is the slave descriptor.
 */
#define TX_H1_COMPONENT_TYPE bstream_new
#define TX_H1_COMPONENT_NAME tx_H1
#define TX_H1_BASE 0x0
#define TX_H1_SPAN 512
#define TX_H1_END 0x1ff

/*
 * Macros for device 'ad5724_pamp_spi', class 'altera_avalon_spi'
 * The macros are prefixed with 'AD5724_PAMP_SPI_'.
 * The prefix is the slave descriptor.
 */
#define AD5724_PAMP_SPI_COMPONENT_TYPE altera_avalon_spi
#define AD5724_PAMP_SPI_COMPONENT_NAME ad5724_pamp_spi
#define AD5724_PAMP_SPI_BASE 0x0
#define AD5724_PAMP_SPI_SPAN 32
#define AD5724_PAMP_SPI_END 0x1f
#define AD5724_PAMP_SPI_IRQ 2
#define AD5724_PAMP_SPI_CLOCKMULT 1
#define AD5724_PAMP_SPI_CLOCKPHASE 0
#define AD5724_PAMP_SPI_CLOCKPOLARITY 1
#define AD5724_PAMP_SPI_CLOCKUNITS "Hz"
#define AD5724_PAMP_SPI_DATABITS 24
#define AD5724_PAMP_SPI_DATAWIDTH 32
#define AD5724_PAMP_SPI_DELAYMULT "1.0E-9"
#define AD5724_PAMP_SPI_DELAYUNITS "ns"
#define AD5724_PAMP_SPI_EXTRADELAY 0
#define AD5724_PAMP_SPI_INSERT_SYNC 0
#define AD5724_PAMP_SPI_ISMASTER 1
#define AD5724_PAMP_SPI_LSBFIRST 0
#define AD5724_PAMP_SPI_NUMSLAVES 1
#define AD5724_PAMP_SPI_PREFIX "spi_"
#define AD5724_PAMP_SPI_SYNC_REG_DEPTH 2
#define AD5724_PAMP_SPI_TARGETCLOCK 128000
#define AD5724_PAMP_SPI_TARGETSSDELAY "2000.0"

/*
 * Macros for device 'nco_phase_ph_overlap', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PH_OVERLAP_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PH_OVERLAP_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PH_OVERLAP_COMPONENT_NAME nco_phase_ph_overlap
#define NCO_PHASE_PH_OVERLAP_BASE 0x20
#define NCO_PHASE_PH_OVERLAP_SPAN 16
#define NCO_PHASE_PH_OVERLAP_END 0x2f
#define NCO_PHASE_PH_OVERLAP_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PH_OVERLAP_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PH_OVERLAP_CAPTURE 0
#define NCO_PHASE_PH_OVERLAP_DATA_WIDTH 16
#define NCO_PHASE_PH_OVERLAP_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PH_OVERLAP_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PH_OVERLAP_EDGE_TYPE NONE
#define NCO_PHASE_PH_OVERLAP_FREQ 50000000
#define NCO_PHASE_PH_OVERLAP_HAS_IN 0
#define NCO_PHASE_PH_OVERLAP_HAS_OUT 1
#define NCO_PHASE_PH_OVERLAP_HAS_TRI 0
#define NCO_PHASE_PH_OVERLAP_IRQ_TYPE NONE
#define NCO_PHASE_PH_OVERLAP_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_ph_inc', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PH_INC_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PH_INC_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PH_INC_COMPONENT_NAME nco_phase_ph_inc
#define NCO_PHASE_PH_INC_BASE 0x30
#define NCO_PHASE_PH_INC_SPAN 16
#define NCO_PHASE_PH_INC_END 0x3f
#define NCO_PHASE_PH_INC_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PH_INC_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PH_INC_CAPTURE 0
#define NCO_PHASE_PH_INC_DATA_WIDTH 8
#define NCO_PHASE_PH_INC_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PH_INC_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PH_INC_EDGE_TYPE NONE
#define NCO_PHASE_PH_INC_FREQ 50000000
#define NCO_PHASE_PH_INC_HAS_IN 0
#define NCO_PHASE_PH_INC_HAS_OUT 1
#define NCO_PHASE_PH_INC_HAS_TRI 0
#define NCO_PHASE_PH_INC_IRQ_TYPE NONE
#define NCO_PHASE_PH_INC_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_4_to_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_4_TO_7_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_4_TO_7_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_4_TO_7_COMPONENT_NAME nco_phase_phase_4_to_7
#define NCO_PHASE_PHASE_4_TO_7_BASE 0x40
#define NCO_PHASE_PHASE_4_TO_7_SPAN 16
#define NCO_PHASE_PHASE_4_TO_7_END 0x4f
#define NCO_PHASE_PHASE_4_TO_7_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_4_TO_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_4_TO_7_CAPTURE 0
#define NCO_PHASE_PHASE_4_TO_7_DATA_WIDTH 32
#define NCO_PHASE_PHASE_4_TO_7_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_4_TO_7_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_4_TO_7_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_4_TO_7_FREQ 50000000
#define NCO_PHASE_PHASE_4_TO_7_HAS_IN 0
#define NCO_PHASE_PHASE_4_TO_7_HAS_OUT 1
#define NCO_PHASE_PHASE_4_TO_7_HAS_TRI 0
#define NCO_PHASE_PHASE_4_TO_7_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_4_TO_7_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_0_to_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_0_TO_3_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_0_TO_3_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_0_TO_3_COMPONENT_NAME nco_phase_phase_0_to_3
#define NCO_PHASE_PHASE_0_TO_3_BASE 0x50
#define NCO_PHASE_PHASE_0_TO_3_SPAN 16
#define NCO_PHASE_PHASE_0_TO_3_END 0x5f
#define NCO_PHASE_PHASE_0_TO_3_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_0_TO_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_0_TO_3_CAPTURE 0
#define NCO_PHASE_PHASE_0_TO_3_DATA_WIDTH 32
#define NCO_PHASE_PHASE_0_TO_3_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_0_TO_3_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_0_TO_3_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_0_TO_3_FREQ 50000000
#define NCO_PHASE_PHASE_0_TO_3_HAS_IN 0
#define NCO_PHASE_PHASE_0_TO_3_HAS_OUT 1
#define NCO_PHASE_PHASE_0_TO_3_HAS_TRI 0
#define NCO_PHASE_PHASE_0_TO_3_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_0_TO_3_RESET_VALUE 0

/*
 * Macros for device 'dma', class 'altera_avalon_dma'
 * The macros are prefixed with 'DMA_'.
 * The prefix is the slave descriptor.
 */
#define DMA_COMPONENT_TYPE altera_avalon_dma
#define DMA_COMPONENT_NAME dma
#define DMA_BASE 0x60
#define DMA_SPAN 32
#define DMA_END 0x7f
#define DMA_IRQ 3
#define DMA_ALLOW_BYTE_TRANSACTIONS 0
#define DMA_ALLOW_DOUBLEWORD_TRANSACTIONS 0
#define DMA_ALLOW_HW_TRANSACTIONS 0
#define DMA_ALLOW_QUADWORD_TRANSACTIONS 0
#define DMA_ALLOW_WORD_TRANSACTIONS 1
#define DMA_LENGTHWIDTH 32
#define DMA_MAX_BURST_SIZE 128

/*
 * Macros for device 'fifo_sink_CH_A', class 'altera_avalon_fifo'
 * Path to the device is from the master group 'dma_read_master'.
 * The macros are prefixed with 'DMA_READ_MASTER_FIFO_SINK_CH_A_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define DMA_READ_MASTER_FIFO_SINK_CH_A_COMPONENT_TYPE altera_avalon_fifo
#define DMA_READ_MASTER_FIFO_SINK_CH_A_COMPONENT_NAME fifo_sink_CH_A
#define DMA_READ_MASTER_FIFO_SINK_CH_A_BASE 0x290
#define DMA_READ_MASTER_FIFO_SINK_CH_A_SPAN 8
#define DMA_READ_MASTER_FIFO_SINK_CH_A_END 0x297
#define DMA_READ_MASTER_FIFO_SINK_CH_A_AVALONMM_AVALONMM_DATA_WIDTH 32
#define DMA_READ_MASTER_FIFO_SINK_CH_A_AVALONMM_AVALONST_DATA_WIDTH 32
#define DMA_READ_MASTER_FIFO_SINK_CH_A_BITS_PER_SYMBOL 32
#define DMA_READ_MASTER_FIFO_SINK_CH_A_CHANNEL_WIDTH 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_ERROR_WIDTH 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_FIFO_DEPTH 4096
#define DMA_READ_MASTER_FIFO_SINK_CH_A_SINGLE_CLOCK_MODE 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_SYMBOLS_PER_BEAT 1
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_AVALONMM_READ_SLAVE 1
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_AVALONMM_WRITE_SLAVE 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_AVALONST_SINK 1
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_AVALONST_SOURCE 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_BACKPRESSURE 1
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_IRQ 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_PACKET 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_READ_CONTROL 1
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_REGISTER 0
#define DMA_READ_MASTER_FIFO_SINK_CH_A_USE_WRITE_CONTROL 1

/*
 * Macros for device 'sdram', class 'altera_avalon_new_sdram_controller'
 * Path to the device is from the master group 'dma_write_master'.
 * The macros are prefixed with 'DMA_WRITE_MASTER_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define DMA_WRITE_MASTER_SDRAM_COMPONENT_TYPE altera_avalon_new_sdram_controller
#define DMA_WRITE_MASTER_SDRAM_COMPONENT_NAME sdram
#define DMA_WRITE_MASTER_SDRAM_BASE 0x4000000
#define DMA_WRITE_MASTER_SDRAM_SPAN 67108864
#define DMA_WRITE_MASTER_SDRAM_END 0x7ffffff
#define DMA_WRITE_MASTER_SDRAM_CAS_LATENCY 3
#define DMA_WRITE_MASTER_SDRAM_CONTENTS_INFO 
#define DMA_WRITE_MASTER_SDRAM_INIT_NOP_DELAY 0.0
#define DMA_WRITE_MASTER_SDRAM_INIT_REFRESH_COMMANDS 2
#define DMA_WRITE_MASTER_SDRAM_IS_INITIALIZED 1
#define DMA_WRITE_MASTER_SDRAM_POWERUP_DELAY 100.0
#define DMA_WRITE_MASTER_SDRAM_REFRESH_PERIOD 7.8125
#define DMA_WRITE_MASTER_SDRAM_REGISTER_DATA_IN 1
#define DMA_WRITE_MASTER_SDRAM_SDRAM_ADDR_WIDTH 25
#define DMA_WRITE_MASTER_SDRAM_SDRAM_BANK_WIDTH 2
#define DMA_WRITE_MASTER_SDRAM_SDRAM_COL_WIDTH 10
#define DMA_WRITE_MASTER_SDRAM_SDRAM_DATA_WIDTH 16
#define DMA_WRITE_MASTER_SDRAM_SDRAM_NUM_BANKS 4
#define DMA_WRITE_MASTER_SDRAM_SDRAM_NUM_CHIPSELECTS 1
#define DMA_WRITE_MASTER_SDRAM_SDRAM_ROW_WIDTH 13
#define DMA_WRITE_MASTER_SDRAM_SHARED_DATA 0
#define DMA_WRITE_MASTER_SDRAM_SIM_MODEL_BASE 0
#define DMA_WRITE_MASTER_SDRAM_STARVATION_INDICATOR 0
#define DMA_WRITE_MASTER_SDRAM_TRISTATE_BRIDGE_SLAVE ""
#define DMA_WRITE_MASTER_SDRAM_T_AC 5.4
#define DMA_WRITE_MASTER_SDRAM_T_MRD 3
#define DMA_WRITE_MASTER_SDRAM_T_RCD 15.0
#define DMA_WRITE_MASTER_SDRAM_T_RFC 70.0
#define DMA_WRITE_MASTER_SDRAM_T_RP 15.0
#define DMA_WRITE_MASTER_SDRAM_T_WR 14.0
#define DMA_WRITE_MASTER_SDRAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define DMA_WRITE_MASTER_SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define DMA_WRITE_MASTER_SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16

/*
 * Macros for device 'grad_i2c', class 'altera_avalon_i2c'
 * The macros are prefixed with 'GRAD_I2C_'.
 * The prefix is the slave descriptor.
 */
#define GRAD_I2C_COMPONENT_TYPE altera_avalon_i2c
#define GRAD_I2C_COMPONENT_NAME grad_i2c
#define GRAD_I2C_BASE 0xc0
#define GRAD_I2C_SPAN 64
#define GRAD_I2C_END 0xff
#define GRAD_I2C_IRQ 4
#define GRAD_I2C_FIFO_DEPTH 64
#define GRAD_I2C_FREQ 50000000
#define GRAD_I2C_USE_AV_ST 0

/*
 * Macros for device 'fifo_sink_CH_A_in_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_SINK_CH_A_IN_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_SINK_CH_A_IN_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_SINK_CH_A_IN_CSR_COMPONENT_NAME fifo_sink_CH_A
#define FIFO_SINK_CH_A_IN_CSR_BASE 0x100
#define FIFO_SINK_CH_A_IN_CSR_SPAN 32
#define FIFO_SINK_CH_A_IN_CSR_END 0x11f
#define FIFO_SINK_CH_A_IN_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_SINK_CH_A_IN_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_SINK_CH_A_IN_CSR_BITS_PER_SYMBOL 32
#define FIFO_SINK_CH_A_IN_CSR_CHANNEL_WIDTH 0
#define FIFO_SINK_CH_A_IN_CSR_ERROR_WIDTH 0
#define FIFO_SINK_CH_A_IN_CSR_FIFO_DEPTH 4096
#define FIFO_SINK_CH_A_IN_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_SINK_CH_A_IN_CSR_SYMBOLS_PER_BEAT 1
#define FIFO_SINK_CH_A_IN_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_SINK_CH_A_IN_CSR_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_SINK_CH_A_IN_CSR_USE_AVALONST_SINK 1
#define FIFO_SINK_CH_A_IN_CSR_USE_AVALONST_SOURCE 0
#define FIFO_SINK_CH_A_IN_CSR_USE_BACKPRESSURE 1
#define FIFO_SINK_CH_A_IN_CSR_USE_IRQ 0
#define FIFO_SINK_CH_A_IN_CSR_USE_PACKET 0
#define FIFO_SINK_CH_A_IN_CSR_USE_READ_CONTROL 1
#define FIFO_SINK_CH_A_IN_CSR_USE_REGISTER 0
#define FIFO_SINK_CH_A_IN_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'fifo_sink_CH_A_out_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_SINK_CH_A_OUT_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_SINK_CH_A_OUT_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_SINK_CH_A_OUT_CSR_COMPONENT_NAME fifo_sink_CH_A
#define FIFO_SINK_CH_A_OUT_CSR_BASE 0x120
#define FIFO_SINK_CH_A_OUT_CSR_SPAN 32
#define FIFO_SINK_CH_A_OUT_CSR_END 0x13f
#define FIFO_SINK_CH_A_OUT_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_SINK_CH_A_OUT_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_SINK_CH_A_OUT_CSR_BITS_PER_SYMBOL 32
#define FIFO_SINK_CH_A_OUT_CSR_CHANNEL_WIDTH 0
#define FIFO_SINK_CH_A_OUT_CSR_ERROR_WIDTH 0
#define FIFO_SINK_CH_A_OUT_CSR_FIFO_DEPTH 4096
#define FIFO_SINK_CH_A_OUT_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_SINK_CH_A_OUT_CSR_SYMBOLS_PER_BEAT 1
#define FIFO_SINK_CH_A_OUT_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_SINK_CH_A_OUT_CSR_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_SINK_CH_A_OUT_CSR_USE_AVALONST_SINK 1
#define FIFO_SINK_CH_A_OUT_CSR_USE_AVALONST_SOURCE 0
#define FIFO_SINK_CH_A_OUT_CSR_USE_BACKPRESSURE 1
#define FIFO_SINK_CH_A_OUT_CSR_USE_IRQ 0
#define FIFO_SINK_CH_A_OUT_CSR_USE_PACKET 0
#define FIFO_SINK_CH_A_OUT_CSR_USE_READ_CONTROL 1
#define FIFO_SINK_CH_A_OUT_CSR_USE_REGISTER 0
#define FIFO_SINK_CH_A_OUT_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'ad9276_spi', class 'altera_avalon_spi'
 * The macros are prefixed with 'AD9276_SPI_'.
 * The prefix is the slave descriptor.
 */
#define AD9276_SPI_COMPONENT_TYPE altera_avalon_spi
#define AD9276_SPI_COMPONENT_NAME ad9276_spi
#define AD9276_SPI_BASE 0x140
#define AD9276_SPI_SPAN 32
#define AD9276_SPI_END 0x15f
#define AD9276_SPI_IRQ 0
#define AD9276_SPI_CLOCKMULT 1
#define AD9276_SPI_CLOCKPHASE 0
#define AD9276_SPI_CLOCKPOLARITY 0
#define AD9276_SPI_CLOCKUNITS "Hz"
#define AD9276_SPI_DATABITS 24
#define AD9276_SPI_DATAWIDTH 32
#define AD9276_SPI_DELAYMULT "1.0E-9"
#define AD9276_SPI_DELAYUNITS "ns"
#define AD9276_SPI_EXTRADELAY 0
#define AD9276_SPI_INSERT_SYNC 0
#define AD9276_SPI_ISMASTER 1
#define AD9276_SPI_LSBFIRST 0
#define AD9276_SPI_NUMSLAVES 1
#define AD9276_SPI_PREFIX "spi_"
#define AD9276_SPI_SYNC_REG_DEPTH 2
#define AD9276_SPI_TARGETCLOCK 128000
#define AD9276_SPI_TARGETSSDELAY "2000.0"

/*
 * Macros for device 'general_cnt_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'GENERAL_CNT_IN_'.
 * The prefix is the slave descriptor.
 */
#define GENERAL_CNT_IN_COMPONENT_TYPE altera_avalon_pio
#define GENERAL_CNT_IN_COMPONENT_NAME general_cnt_in
#define GENERAL_CNT_IN_BASE 0x1e0
#define GENERAL_CNT_IN_SPAN 16
#define GENERAL_CNT_IN_END 0x1ef
#define GENERAL_CNT_IN_BIT_CLEARING_EDGE_REGISTER 0
#define GENERAL_CNT_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GENERAL_CNT_IN_CAPTURE 0
#define GENERAL_CNT_IN_DATA_WIDTH 32
#define GENERAL_CNT_IN_DO_TEST_BENCH_WIRING 0
#define GENERAL_CNT_IN_DRIVEN_SIM_VALUE 0
#define GENERAL_CNT_IN_EDGE_TYPE NONE
#define GENERAL_CNT_IN_FREQ 50000000
#define GENERAL_CNT_IN_HAS_IN 1
#define GENERAL_CNT_IN_HAS_OUT 0
#define GENERAL_CNT_IN_HAS_TRI 0
#define GENERAL_CNT_IN_IRQ_TYPE NONE
#define GENERAL_CNT_IN_RESET_VALUE 0

/*
 * Macros for device 'general_cnt_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'GENERAL_CNT_OUT_'.
 * The prefix is the slave descriptor.
 */
#define GENERAL_CNT_OUT_COMPONENT_TYPE altera_avalon_pio
#define GENERAL_CNT_OUT_COMPONENT_NAME general_cnt_out
#define GENERAL_CNT_OUT_BASE 0x1f0
#define GENERAL_CNT_OUT_SPAN 16
#define GENERAL_CNT_OUT_END 0x1ff
#define GENERAL_CNT_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define GENERAL_CNT_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GENERAL_CNT_OUT_CAPTURE 0
#define GENERAL_CNT_OUT_DATA_WIDTH 32
#define GENERAL_CNT_OUT_DO_TEST_BENCH_WIRING 0
#define GENERAL_CNT_OUT_DRIVEN_SIM_VALUE 0
#define GENERAL_CNT_OUT_EDGE_TYPE NONE
#define GENERAL_CNT_OUT_FREQ 50000000
#define GENERAL_CNT_OUT_HAS_IN 0
#define GENERAL_CNT_OUT_HAS_OUT 1
#define GENERAL_CNT_OUT_HAS_TRI 0
#define GENERAL_CNT_OUT_IRQ_TYPE NONE
#define GENERAL_CNT_OUT_RESET_VALUE 0

/*
 * Macros for device 'rx_in_SHORT', class 'bstream_new'
 * The macros are prefixed with 'RX_IN_SHORT_'.
 * The prefix is the slave descriptor.
 */
#define RX_IN_SHORT_COMPONENT_TYPE bstream_new
#define RX_IN_SHORT_COMPONENT_NAME rx_in_SHORT
#define RX_IN_SHORT_BASE 0x200
#define RX_IN_SHORT_SPAN 512
#define RX_IN_SHORT_END 0x3ff

/*
 * Macros for device 'fifo_sink_CH_A_out', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_SINK_CH_A_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_SINK_CH_A_OUT_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_SINK_CH_A_OUT_COMPONENT_NAME fifo_sink_CH_A
#define FIFO_SINK_CH_A_OUT_BASE 0x290
#define FIFO_SINK_CH_A_OUT_SPAN 8
#define FIFO_SINK_CH_A_OUT_END 0x297
#define FIFO_SINK_CH_A_OUT_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_SINK_CH_A_OUT_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_SINK_CH_A_OUT_BITS_PER_SYMBOL 32
#define FIFO_SINK_CH_A_OUT_CHANNEL_WIDTH 0
#define FIFO_SINK_CH_A_OUT_ERROR_WIDTH 0
#define FIFO_SINK_CH_A_OUT_FIFO_DEPTH 4096
#define FIFO_SINK_CH_A_OUT_SINGLE_CLOCK_MODE 0
#define FIFO_SINK_CH_A_OUT_SYMBOLS_PER_BEAT 1
#define FIFO_SINK_CH_A_OUT_USE_AVALONMM_READ_SLAVE 1
#define FIFO_SINK_CH_A_OUT_USE_AVALONMM_WRITE_SLAVE 0
#define FIFO_SINK_CH_A_OUT_USE_AVALONST_SINK 1
#define FIFO_SINK_CH_A_OUT_USE_AVALONST_SOURCE 0
#define FIFO_SINK_CH_A_OUT_USE_BACKPRESSURE 1
#define FIFO_SINK_CH_A_OUT_USE_IRQ 0
#define FIFO_SINK_CH_A_OUT_USE_PACKET 0
#define FIFO_SINK_CH_A_OUT_USE_READ_CONTROL 1
#define FIFO_SINK_CH_A_OUT_USE_REGISTER 0
#define FIFO_SINK_CH_A_OUT_USE_WRITE_CONTROL 1

/*
 * Macros for device 'sys_pll_reconfig', class 'altera_pll_reconfig'
 * The macros are prefixed with 'SYS_PLL_RECONFIG_'.
 * The prefix is the slave descriptor.
 */
#define SYS_PLL_RECONFIG_COMPONENT_TYPE altera_pll_reconfig
#define SYS_PLL_RECONFIG_COMPONENT_NAME sys_pll_reconfig
#define SYS_PLL_RECONFIG_BASE 0x300
#define SYS_PLL_RECONFIG_SPAN 256
#define SYS_PLL_RECONFIG_END 0x3ff

/*
 * Macros for device 'grad_hSide_en', class 'bstream_new'
 * The macros are prefixed with 'GRAD_HSIDE_EN_'.
 * The prefix is the slave descriptor.
 */
#define GRAD_HSIDE_EN_COMPONENT_TYPE bstream_new
#define GRAD_HSIDE_EN_COMPONENT_NAME grad_hSide_en
#define GRAD_HSIDE_EN_BASE 0x400
#define GRAD_HSIDE_EN_SPAN 512
#define GRAD_HSIDE_EN_END 0x5ff

/*
 * Macros for device 'tx_CHRG_BS', class 'bstream_new'
 * The macros are prefixed with 'TX_CHRG_BS_'.
 * The prefix is the slave descriptor.
 */
#define TX_CHRG_BS_COMPONENT_TYPE bstream_new
#define TX_CHRG_BS_COMPONENT_NAME tx_CHRG_BS
#define TX_CHRG_BS_BASE 0x600
#define TX_CHRG_BS_SPAN 512
#define TX_CHRG_BS_END 0x7ff

/*
 * Macros for device 'tx_CLKPH', class 'bstream_new'
 * The macros are prefixed with 'TX_CLKPH_'.
 * The prefix is the slave descriptor.
 */
#define TX_CLKPH_COMPONENT_TYPE bstream_new
#define TX_CLKPH_COMPONENT_NAME tx_CLKPH
#define TX_CLKPH_BASE 0x800
#define TX_CLKPH_SPAN 512
#define TX_CLKPH_END 0x9ff

/*
 * Macros for device 'gradY_Lo_L', class 'bstream_new'
 * The macros are prefixed with 'GRADY_LO_L_'.
 * The prefix is the slave descriptor.
 */
#define GRADY_LO_L_COMPONENT_TYPE bstream_new
#define GRADY_LO_L_COMPONENT_NAME gradY_Lo_L
#define GRADY_LO_L_BASE 0xa00
#define GRADY_LO_L_SPAN 512
#define GRADY_LO_L_END 0xbff

/*
 * Macros for device 'gradY_Lo_R', class 'bstream_new'
 * The macros are prefixed with 'GRADY_LO_R_'.
 * The prefix is the slave descriptor.
 */
#define GRADY_LO_R_COMPONENT_TYPE bstream_new
#define GRADY_LO_R_COMPONENT_NAME gradY_Lo_R
#define GRADY_LO_R_BASE 0xc00
#define GRADY_LO_R_SPAN 512
#define GRADY_LO_R_END 0xdff

/*
 * Macros for device 'aux', class 'bstream_new'
 * The macros are prefixed with 'AUX_'.
 * The prefix is the slave descriptor.
 */
#define AUX_COMPONENT_TYPE bstream_new
#define AUX_COMPONENT_NAME aux
#define AUX_BASE 0xe00
#define AUX_SPAN 512
#define AUX_END 0xfff

/*
 * Macros for device 'gradX_Lo_L', class 'bstream_new'
 * The macros are prefixed with 'GRADX_LO_L_'.
 * The prefix is the slave descriptor.
 */
#define GRADX_LO_L_COMPONENT_TYPE bstream_new
#define GRADX_LO_L_COMPONENT_NAME gradX_Lo_L
#define GRADX_LO_L_BASE 0x1000
#define GRADX_LO_L_SPAN 512
#define GRADX_LO_L_END 0x11ff

/*
 * Macros for device 'gradX_Lo_R', class 'bstream_new'
 * The macros are prefixed with 'GRADX_LO_R_'.
 * The prefix is the slave descriptor.
 */
#define GRADX_LO_R_COMPONENT_TYPE bstream_new
#define GRADX_LO_R_COMPONENT_NAME gradX_Lo_R
#define GRADX_LO_R_BASE 0x1200
#define GRADX_LO_R_SPAN 512
#define GRADX_LO_R_END 0x13ff

/*
 * Macros for device 'tx_DUMP', class 'bstream_new'
 * The macros are prefixed with 'TX_DUMP_'.
 * The prefix is the slave descriptor.
 */
#define TX_DUMP_COMPONENT_TYPE bstream_new
#define TX_DUMP_COMPONENT_NAME tx_DUMP
#define TX_DUMP_BASE 0x3000
#define TX_DUMP_SPAN 512
#define TX_DUMP_END 0x31ff

/*
 * Macros for device 'rx_ADC_EN', class 'bstream_new'
 * The macros are prefixed with 'RX_ADC_EN_'.
 * The prefix is the slave descriptor.
 */
#define RX_ADC_EN_COMPONENT_TYPE bstream_new
#define RX_ADC_EN_COMPONENT_NAME rx_ADC_EN
#define RX_ADC_EN_BASE 0x4000
#define RX_ADC_EN_SPAN 512
#define RX_ADC_EN_END 0x41ff

/*
 * Macros for device 'tx_CHRG', class 'bstream_new'
 * The macros are prefixed with 'TX_CHRG_'.
 * The prefix is the slave descriptor.
 */
#define TX_CHRG_COMPONENT_TYPE bstream_new
#define TX_CHRG_COMPONENT_NAME tx_CHRG
#define TX_CHRG_BASE 0x5000
#define TX_CHRG_SPAN 512
#define TX_CHRG_END 0x51ff

/*
 * Macros for device 'tx_L2', class 'bstream_new'
 * The macros are prefixed with 'TX_L2_'.
 * The prefix is the slave descriptor.
 */
#define TX_L2_COMPONENT_TYPE bstream_new
#define TX_L2_COMPONENT_NAME tx_L2
#define TX_L2_BASE 0x6000
#define TX_L2_SPAN 512
#define TX_L2_END 0x61ff

/*
 * Macros for device 'tx_L1', class 'bstream_new'
 * The macros are prefixed with 'TX_L1_'.
 * The prefix is the slave descriptor.
 */
#define TX_L1_COMPONENT_TYPE bstream_new
#define TX_L1_COMPONENT_NAME tx_L1
#define TX_L1_BASE 0x7000
#define TX_L1_SPAN 512
#define TX_L1_END 0x71ff

/*
 * Macros for device 'tx_H2', class 'bstream_new'
 * The macros are prefixed with 'TX_H2_'.
 * The prefix is the slave descriptor.
 */
#define TX_H2_COMPONENT_TYPE bstream_new
#define TX_H2_COMPONENT_NAME tx_H2
#define TX_H2_BASE 0x8000
#define TX_H2_SPAN 512
#define TX_H2_END 0x81ff

/*
 * Macros for device 'sdram', class 'altera_avalon_new_sdram_controller'
 * The macros are prefixed with 'SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define SDRAM_COMPONENT_TYPE altera_avalon_new_sdram_controller
#define SDRAM_COMPONENT_NAME sdram
#define SDRAM_BASE 0x4000000
#define SDRAM_SPAN 67108864
#define SDRAM_END 0x7ffffff
#define SDRAM_CAS_LATENCY 3
#define SDRAM_CONTENTS_INFO 
#define SDRAM_INIT_NOP_DELAY 0.0
#define SDRAM_INIT_REFRESH_COMMANDS 2
#define SDRAM_IS_INITIALIZED 1
#define SDRAM_POWERUP_DELAY 100.0
#define SDRAM_REFRESH_PERIOD 7.8125
#define SDRAM_REGISTER_DATA_IN 1
#define SDRAM_SDRAM_ADDR_WIDTH 25
#define SDRAM_SDRAM_BANK_WIDTH 2
#define SDRAM_SDRAM_COL_WIDTH 10
#define SDRAM_SDRAM_DATA_WIDTH 16
#define SDRAM_SDRAM_NUM_BANKS 4
#define SDRAM_SDRAM_NUM_CHIPSELECTS 1
#define SDRAM_SDRAM_ROW_WIDTH 13
#define SDRAM_SHARED_DATA 0
#define SDRAM_SIM_MODEL_BASE 0
#define SDRAM_STARVATION_INDICATOR 0
#define SDRAM_TRISTATE_BRIDGE_SLAVE ""
#define SDRAM_T_AC 5.4
#define SDRAM_T_MRD 3
#define SDRAM_T_RCD 15.0
#define SDRAM_T_RFC 70.0
#define SDRAM_T_RP 15.0
#define SDRAM_T_WR 14.0
#define SDRAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16


#endif /* _ALTERA_HPS_SOC_SYSTEM_H_ */
